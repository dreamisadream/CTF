# encoding: utf-8


# This file was *autogenerated* from the file solve.sage
from sage.all_cmdline import *   # import sage library

_sage_const_0 = Integer(0); _sage_const_1 = Integer(1); _sage_const_8 = Integer(8); _sage_const_4 = Integer(4); _sage_const_2 = Integer(2); _sage_const_32 = Integer(32); _sage_const_16 = Integer(16); _sage_const_5 = Integer(5)#!/usr/bin/env python3
from sage.matrix.berlekamp_massey import berlekamp_massey

class LFSR:
    def __init__(self, init, feedback):
        self.state = init
        self.feedback = feedback
    @classmethod
    def random(cls, size):
        init = [random.choice([_sage_const_0 , _sage_const_1 ]) for i in range(size)]
        feedback = [random.choice([_sage_const_0 , _sage_const_1 ]) for i in range(size)]
        return cls(init, feedback)
    def getbit(self):
        nextbit = reduce(lambda x, y: x ^ y, [int(i) & int(j) for i, j in zip(self.state, self.feedback)])
        self.state = self.state[_sage_const_1 :] + [nextbit]
        return nextbit
    def getbyte(self):
        b = _sage_const_0 
        for i in range(_sage_const_8 ):
            b = (b << _sage_const_1 ) + self.getbit()
        return bytes([b])

def xor(a, b):
    return bytes([i ^ j for i, j in zip(a, b)])

def bytes2bits(x):
    return [int(i) for i in f'{int.from_bytes(x, "big"):0{len(x) * 8}b}']


enc = bytes.fromhex('a9ee8f4d7865376e35')

# 明文 xor 密文 = key (部份 (S0 ~ S31))
stream = xor(enc[:_sage_const_4 ], b'CTF{')
'''
GF(2)(i) : Galois Field mod 2, 用 i 代入 
e.g. GF(2)(1) = 1, GF(2)(8) = 0
'''
s = [GF(_sage_const_2 )(i) for i in bytes2bits(stream)]
assert(len(s) == _sage_const_32 )

'''
berlekamp_massey(s) 獲得 linear recurrence relation 多項式
berlekamp_massey(s).list() 取得係數 (升冪排序)
[0]*16 的目的是補齊 
'''
print(berlekamp_massey(s))
print(berlekamp_massey(s).list())
feedback = ([_sage_const_0 ]*_sage_const_16 +berlekamp_massey(s).list()[:-_sage_const_1 ])[-_sage_const_16 :]
print(feedback)

# generate xor key to decrypt
lfsr = LFSR(bytes2bits(stream)[_sage_const_16 :], feedback)
key = b''.join([lfsr.getbyte() for _ in range(_sage_const_5 )])
plain = xor(enc[_sage_const_4 :], key)
print(b'CTF{' + plain)

