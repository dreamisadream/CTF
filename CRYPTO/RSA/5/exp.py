#!/usr/bin/env python3
import binascii
from Crypto.Util.number import long_to_bytes
from sage.all import Integer, xgcd, mod, inverse_mod


n = 3283820208958447696987943374117448908009765357285654693385347327161990683145362435055078968569512096812028089118865534433123727617331619214412173257331161
p = 34387544593670505224894952205499074005031928791959611454481093888481277920639
q = 95494466027181231798633086231116363926111790946014452380632032637864163116199
phi = (p - 1) * (q - 1)
e = 65537
flag = 2152534604028570372634288477962037445130495144236447333908131330331177601915631781056255815304219841064038378099612028528380520661613873180982330559507116

# Algorithm from https://eprint.iacr.org/2020/1059.pdf
phi_h = (p - 1) * (q - 1) // e
g = 1
while True:
    g += 1
    ge = pow(g, phi_h, n)
    if ge != 1: break

d = inverse_mod(e, phi_h)
a = pow(flag, d, n)
l = ge
P = []
ell = 1
for i in range(0, e):
    x = (a * l) % n
    if b'flag' in long_to_bytes(x):
        print(long_to_bytes(x))
    l = (l * ge) % n